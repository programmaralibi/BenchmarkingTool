******************************************
-----------------START-----------------
Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
....
Completed 4000 transactions
	Stock level .............   155 ( 3.9%)
	Order status by name ....   108 ( 2.7%)
	Order status by ID ......    65 ( 1.6%)
	Payment by name .........  1050 (26.2%)
	Payment by ID ...........   661 (16.5%)
	Delivery schedule .......   167 ( 4.2%)
	New order ...............  1774 (44.4%)
	New order rollback ......    20 ( 0.5%)
Resetting database to initial state

 Time taken for executing : 32803command :---
[java, -jar, dacapo.jar, h2]Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
....
Completed 4000 transactions
	Stock level .............   155 ( 3.9%)
	Order status by name ....   108 ( 2.7%)
	Order status by ID ......    65 ( 1.6%)
	Payment by name .........  1050 (26.2%)
	Payment by ID ...........   661 (16.5%)
	Delivery schedule .......   167 ( 4.2%)
	New order ...............  1774 (44.4%)
	New order rollback ......    20 ( 0.5%)
Resetting database to initial state

 Time taken for executing : 35710command :---
[java, -jar, dacapo.jar, h2]
-----------------END----------------- 



******************************************
-----------------START-----------------
Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]

 Time taken for executing : 21221command :---
[java, -Xms5M, -Xmx5M, -jar, dacapo.jar, h2]Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]

 Time taken for executing : 21635command :---
[java, -Xms5M, -Xmx5M, -jar, dacapo.jar, h2]
-----------------END----------------- 



******************************************
-----------------START-----------------
Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]

 Time taken for executing : 7267command :---
[java, -Xms15M, -Xmx15M, -jar, dacapo.jar, h2]Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]

 Time taken for executing : 7082command :---
[java, -Xms15M, -Xmx15M, -jar, dacapo.jar, h2]
-----------------END----------------- 



******************************************
-----------------START-----------------
Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
java.lang.reflect.InvocationTargetException
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.dacapo.harness.H2.preIteration(H2.java:77)
	at org.dacapo.harness.Benchmark.run(Benchmark.java:152)
	at org.dacapo.harness.TestHarness.runBenchmark(TestHarness.java:218)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:171)
	at Harness.main(Harness.java:17)
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at org.h2.value.ValueString.get(ValueString.java:87)
	at org.h2.jdbc.JdbcPreparedStatement.setString(JdbcPreparedStatement.java:313)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.orderTable(SimpleInsert.java:429)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateForOneWarehouse(SimpleInsert.java:149)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateAllTables(SimpleInsert.java:127)
	at org.apache.derbyTesting.system.oe.load.ThreadInsert.populateAllTables(ThreadInsert.java:127)
	at org.dacapo.h2.TPCC.loadData(TPCC.java:400)
	at org.dacapo.h2.TPCC.preIterationMemoryDB(TPCC.java:215)
	at org.dacapo.h2.TPCC.preIteration(TPCC.java:254)
	... 9 more

 Time taken for executing : 6411command :---
[java, -Xms15M, -Xmx15M, -jar, dacapo.jar, h2]Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
java.lang.reflect.InvocationTargetException
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.dacapo.harness.H2.preIteration(H2.java:77)
	at org.dacapo.harness.Benchmark.run(Benchmark.java:152)
	at org.dacapo.harness.TestHarness.runBenchmark(TestHarness.java:218)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:171)
	at Harness.main(Harness.java:17)
Caused by: org.h2.jdbc.JdbcSQLException: Out of memory.; SQL statement:
INSERT INTO ORDERLINE (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_DELIVERY_D, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO, OL_DELIVERY_D_INITIAL, OL_INITIAL)  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, TRUE) [90108-123]
	at org.h2.message.Message.getSQLException(Message.java:111)
	at org.h2.message.Message.convertThrowable(Message.java:303)
	at org.h2.command.Command.executeUpdate(Command.java:231)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:139)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:128)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.orderTable(SimpleInsert.java:437)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateForOneWarehouse(SimpleInsert.java:149)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateAllTables(SimpleInsert.java:127)
	at org.apache.derbyTesting.system.oe.load.ThreadInsert.populateAllTables(ThreadInsert.java:127)
	at org.dacapo.h2.TPCC.loadData(TPCC.java:400)
	at org.dacapo.h2.TPCC.preIterationMemoryDB(TPCC.java:215)
	at org.dacapo.h2.TPCC.preIteration(TPCC.java:254)
	... 9 more
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.math.BigDecimal.movePointLeft(BigDecimal.java:2472)
	at org.h2.value.ValueTimestamp.convertScale(ValueTimestamp.java:150)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:311)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:599)
	at org.h2.command.dml.Insert.insertRows(Insert.java:116)
	at org.h2.command.dml.Insert.update(Insert.java:82)
	at org.h2.command.CommandContainer.update(CommandContainer.java:72)
	at org.h2.command.Command.executeUpdate(Command.java:209)
	... 18 more

 Time taken for executing : 6464command :---
[java, -Xms15M, -Xmx15M, -jar, dacapo.jar, h2]
-----------------END----------------- 



******************************************
-----------------START-----------------
Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
java.lang.reflect.InvocationTargetException
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.dacapo.harness.H2.preIteration(H2.java:77)
	at org.dacapo.harness.Benchmark.run(Benchmark.java:152)
	at org.dacapo.harness.TestHarness.runBenchmark(TestHarness.java:218)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:171)
	at Harness.main(Harness.java:17)
Caused by: org.h2.jdbc.JdbcSQLException: Out of memory.; SQL statement:
INSERT INTO ORDERLINE (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_DELIVERY_D, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO, OL_DELIVERY_D_INITIAL, OL_INITIAL)  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, TRUE) [90108-123]
	at org.h2.message.Message.getSQLException(Message.java:111)
	at org.h2.message.Message.convertThrowable(Message.java:303)
	at org.h2.command.Command.executeUpdate(Command.java:231)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:139)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:128)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.orderTable(SimpleInsert.java:437)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateForOneWarehouse(SimpleInsert.java:149)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateAllTables(SimpleInsert.java:127)
	at org.apache.derbyTesting.system.oe.load.ThreadInsert.populateAllTables(ThreadInsert.java:127)
	at org.dacapo.h2.TPCC.loadData(TPCC.java:400)
	at org.dacapo.h2.TPCC.preIterationMemoryDB(TPCC.java:215)
	at org.dacapo.h2.TPCC.preIteration(TPCC.java:254)
	... 9 more
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at org.h2.value.ValueShort.get(ValueShort.java:132)
	at org.h2.value.Value.convertTo(Value.java:541)
	at org.h2.table.Column.convert(Column.java:148)
	at org.h2.command.dml.Insert.insertRows(Insert.java:108)
	at org.h2.command.dml.Insert.update(Insert.java:82)
	at org.h2.command.CommandContainer.update(CommandContainer.java:72)
	at org.h2.command.Command.executeUpdate(Command.java:209)
	... 18 more

 Time taken for executing : 7457command :---
[java, -Xms20M, -Xmx20M, -jar, dacapo.jar, h2]Using scaled threading model. 2 processors detected, 2 threads used to drive the workload, in a possible range of [1,4000]
java.lang.reflect.InvocationTargetException
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.dacapo.harness.H2.preIteration(H2.java:77)
	at org.dacapo.harness.Benchmark.run(Benchmark.java:152)
	at org.dacapo.harness.TestHarness.runBenchmark(TestHarness.java:218)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:171)
	at Harness.main(Harness.java:17)
Caused by: org.h2.jdbc.JdbcSQLException: Out of memory.; SQL statement:
INSERT INTO ORDERLINE (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_DELIVERY_D, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO, OL_DELIVERY_D_INITIAL, OL_INITIAL)  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, TRUE) [90108-123]
	at org.h2.message.Message.getSQLException(Message.java:111)
	at org.h2.message.Message.convertThrowable(Message.java:303)
	at org.h2.command.Command.executeUpdate(Command.java:231)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:139)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:128)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.orderTable(SimpleInsert.java:437)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateForOneWarehouse(SimpleInsert.java:149)
	at org.apache.derbyTesting.system.oe.load.SimpleInsert.populateAllTables(SimpleInsert.java:127)
	at org.apache.derbyTesting.system.oe.load.ThreadInsert.populateAllTables(ThreadInsert.java:127)
	at org.dacapo.h2.TPCC.loadData(TPCC.java:400)
	at org.dacapo.h2.TPCC.preIterationMemoryDB(TPCC.java:215)
	at org.dacapo.h2.TPCC.preIteration(TPCC.java:254)
	... 9 more
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at org.h2.engine.Session.log(Session.java:591)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:82)
	at org.h2.command.CommandContainer.update(CommandContainer.java:72)
	at org.h2.command.Command.executeUpdate(Command.java:209)
	... 18 more

 Time taken for executing : 7285command :---
[java, -Xms20M, -Xmx20M, -jar, dacapo.jar, h2]
-----------------END----------------- 



